Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme f found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 1: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <RETURN> Lexeme return found
Line# 2: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 2: Token <MULOP> Lexeme * found
Line# 2: Token <ID> Lexeme a found
Line# 2: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	term MULOP unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statement  
Line# 3: Token <ID> Lexeme a found
Line# 3: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 3: Token <CONST_INT> Lexeme 9 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 3: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 4: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 2









	10 --> <a, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 2>

	ScopeTable# 1



	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>







func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : unit 
Line# 6: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 6: Token <ID> Lexeme g found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 6: Token <ID> Lexeme a found
parameter_list  : type_specifier ID
Line# 6: Token <COMMA> Lexeme , found
Line# 6: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 6: Token <ID> Lexeme b found
parameter_list  : parameter_list COMMA type_specifier ID
Line# 6: Token <RPAREN> Lexeme ) found
Line# 6: Token <LCURL> Lexeme { found
Line# 7: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 7: Token <ID> Lexeme x found
Line# 7: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 8: Token <ID> Lexeme x found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 8: Token <ID> Lexeme f found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 8: Token <ADDOP> Lexeme + found
simple_expression : term 
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <ADDOP> Lexeme + found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
Line# 8: Token <ID> Lexeme b found
Line# 8: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : simple_expression ADDOP term  
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 9: Token <RETURN> Lexeme return found
Line# 9: Token <ID> Lexeme x found
Line# 9: Token <SEMICOLON> Lexeme ; found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 10: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 3









	10 --> <a, INT, Width: 2, Offset: 6, IsParam: 1, Scope: 3>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 1, Scope: 3> --> <x, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 3>
	ScopeTable# 1



	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition  
program : program unit 
Line# 12: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 12: Token <ID> Lexeme main found
Line# 12: Token <LPAREN> Lexeme ( found
Line# 12: Token <RPAREN> Lexeme ) found
Line# 12: Token <LCURL> Lexeme { found
Line# 13: Token <INT> Lexeme int found
type_specifier	: INT 
Line# 13: Token <ID> Lexeme a found
Line# 13: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 13: Token <ID> Lexeme b found
Line# 13: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON  
statement : var_declaration 
statements : statement  
Line# 14: Token <ID> Lexeme a found
Line# 14: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 14: Token <CONST_INT> Lexeme 1 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 14: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 15: Token <ID> Lexeme b found
Line# 15: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 15: Token <CONST_INT> Lexeme 2 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 15: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 16: Token <ID> Lexeme a found
Line# 16: Token <ASSIGNOP> Lexeme = found
variable : ID 	 
Line# 16: Token <ID> Lexeme g found
Line# 16: Token <LPAREN> Lexeme ( found
Line# 16: Token <ID> Lexeme a found
Line# 16: Token <COMMA> Lexeme , found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : logic_expression
Line# 16: Token <ID> Lexeme b found
Line# 16: Token <RPAREN> Lexeme ) found
variable : ID 	 
factor	: variable 
unary_expression : factor 
term :	unary_expression 
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
arguments : arguments COMMA logic_expression 
argument_list : arguments  
factor	: ID LPAREN argument_list RPAREN  
unary_expression : factor 
term :	unary_expression 
Line# 16: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: variable ASSIGNOP logic_expression 		 
expression_statement : expression SEMICOLON 		 
statement : expression_statement  
statements : statements statement  
Line# 17: Token <PRINTLN> Lexeme println found
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <RPAREN> Lexeme ) found
Line# 17: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement  
Line# 18: Token <RETURN> Lexeme return found
Line# 18: Token <CONST_INT> Lexeme 0 found
factor	: CONST_INT   
unary_expression : factor 
term :	unary_expression 
Line# 18: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression	: simple_expression 
logic_expression : rel_expression 	 
expression 	: logic_expression	 
statement : RETURN expression SEMICOLON
statements : statements statement  
Line# 19: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL  
	ScopeTable# 4









	10 --> <a, INT, Width: 2, Offset: 2, IsParam: 0, Scope: 4>
	11 --> <b, INT, Width: 2, Offset: 4, IsParam: 0, Scope: 4>
	ScopeTable# 1

	2 --> <main, FUNCTION, Width: 0, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>

	4 --> <f, FUNCTION, Width: 2, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>
	5 --> <g, FUNCTION, Width: 4, Offset: -1, IsParam: 0, Scope: 1, RetType: INT>






func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition  
program : program unit 
start : program 

Total Lines: 20

Total Errors: 0
