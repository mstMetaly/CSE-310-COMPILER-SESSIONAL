<INT, int>
<ID, func>
<LPAREN, (>
<INT, int>
<ID, n>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, i>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, n>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<RETURN, return>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<ASSIGNOP, =>
<ID, n>
<SEMICOLON, ;>
<RETURN, return>
<ID, func>
<LPAREN, (>
<ID, n>
<ADDOP, ->
<CONST_INT, 1>
<RPAREN, )>
<ADDOP, +>
<ID, i>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, func2>
<LPAREN, (>
<INT, int>
<ID, n>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, i>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, n>
<RELOP, ==>
<CONST_INT, 0>
<RPAREN, )>
<RETURN, return>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<ASSIGNOP, =>
<ID, n>
<SEMICOLON, ;>
<RETURN, return>
<ID, func>
<LPAREN, (>
<ID, n>
<ADDOP, ->
<CONST_INT, 1>
<RPAREN, )>
<ADDOP, +>
<ID, i>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, main>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<INT, int>
<ID, a>
<SEMICOLON, ;>
<ID, a>
<ASSIGNOP, =>
<ID, func>
<LPAREN, (>
<CONST_INT, 7>
<RPAREN, )>
<SEMICOLON, ;>
<PRINTLN, println>
<LPAREN, (>
<ID, a>
<RPAREN, )>
<SEMICOLON, ;>
<RETURN, return>
<CONST_INT, 0>
<SEMICOLON, ;>
<RCURL, }>
